package com.example.monstersappmodule8.monster;


import androidx.annotation.NonNull;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import java.io.Serializable;
import java.util.Date;

//Check out this post for Many to Many relationships: https://medium.com/android-news/android-architecture-components-room-relationships-bf473510c14a

/**
 * To check the db description, execute
 * SELECT sql
 * FROM sqlite_schema
 * WHERE name = 'TABLE_NAME'
 *
 * Check indexes in a Table, execute
 * PRAGMA index_list('TABLE_NAME');
 */


@Entity(tableName = "MONSTER")
public class Monster implements Serializable {

    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "ID")
    private Integer id;
    @ColumnInfo(name = "NAME")
    private String name;
    @ColumnInfo(name = "DESCRIPTION")
    private String description;
    @ColumnInfo(name = "IMAGE")
    private String image;
    @ColumnInfo(name = "SCARINESS", defaultValue = "1")
    private Integer scariness;
    @ColumnInfo(name = "TOTAL_VOTES", defaultValue = "0")
    private Integer totalVotes;
    @ColumnInfo(name = "AVERAGE_STARS", defaultValue = "0.0")
    private Float averageStars;
    @ColumnInfo(name = "LAST_UPDATE")
    private Date lastUpdate;


    @Ignore
    private Boolean reviewed;

    //Ignore is needed, else ROOM will try to use this constructor, and this constructor(default) is needed as we have created a personalised constructor
    @Ignore
    public Monster() {
    }

    //The id was left out, since it's going to be autogenerated.
    public Monster(String name, String description, String image, Integer scariness, Integer totalVotes, Float averageStars, Date lastUpdate) {
        this.name = name;
        this.description = description;
        this.image = image;
        this.scariness = scariness;
        this.totalVotes = totalVotes;
        this.averageStars = averageStars;
        this.lastUpdate = lastUpdate;

    }

    //We annotate it with non null to specify this property must have a value
    @NonNull
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public Integer getScariness() {
        return scariness;
    }

    public void setScariness(Integer scariness) {
        this.scariness = scariness;
    }

    public Integer getTotalVotes() {
        return totalVotes;
    }

    public void setTotalVotes(Integer totalVotes) {
        this.totalVotes = totalVotes;
    }

    public Float getAverageStars() {
        return averageStars;
    }

    public void setAverageStars(Float averageStars) {
        this.averageStars = averageStars;
    }

    public Date getLastUpdate() {
        return lastUpdate;
    }

    public void setLastUpdate(Date lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public Boolean getReviewed() {
        return reviewed;
    }

    public void setReviewed(Boolean reviewed) {
        this.reviewed = reviewed;
    }

    @NonNull
    @Override
    public String toString() {
        return "Monster{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", description='" + description + '\'' +
                ", image='" + image + '\'' +
                ", scariness=" + scariness +
                ", totalVotes=" + totalVotes +
                ", averageStars=" + averageStars +
                ", lastUpdate=" + lastUpdate +
                '}';
    }
}
